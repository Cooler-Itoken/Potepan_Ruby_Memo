require "csv" # CSVファイルを扱うためのライブラリを読み込んでいます

puts "1 → 新規でメモを作成する / 2 → 既存のメモを編集する"

memo_type = gets.to_i # ユーザーの入力値を取得し、数字へ変換しています

# if文を使用して続きを作成していきましょう。
# 「memo_type」の値（1 or 2）によって処理を分岐させていきましょう。

if memo_type == 1
  puts "新規ファイルを作成するから、拡張子を除いたファイルを入力してくれよな！"

  # ファイル名の入力
  file_name = gets.chomp #ユーザーが自由にキーボードから文字を入力できる（改行なし表示）

  puts "メモしたい内容を記述してくれよ。完了したらCtrl+Dを押して保存してくれよな！"

  # メモ内容の入力
  content = STDIN.read #「標準入力（を読み取る）」:キーボードから入力された値がターミナルに表示され、そのターミナルからを読み取ること
  # STDIN → 標準入力のための定数　　readlines → 複数業の読み取り
  memo = content.chomp #ユーザーが自由にキーボードから文字を入力できる（改行なし表示）chompの機能は、対象の文字列の末尾から改行コードを削除した新しい文字列の生成

  # open → CSV書き込み
  CSV.open("#{file_name}.csv", "w") do |csv|
    csv.puts ["#{memo}"]
  end

elsif memo_type == 2
  puts "既存のファイルを編集するから、拡張子を除いたファイル名を入力してくれよな！"

  # ファイル名の入力
  file_name = gets.chomp #ユーザーが自由にキーボードから文字を入力できる（改行なし表示）

  puts "追記したい内容を記述してくれい！完了したらCtrl+Dを押すのだ！"

  # メモ内容の入力
  content = STDIN.read #「標準入力（を読み取る）」:キーボードから入力された値がターミナルに表示され、そのターミナルからを読み取ること
  # STDIN → 標準入力のための定数　　readlines → 複数業の読み取り
  memo = content.chomp #ユーザーが自由にキーボードから文字を入力できる（改行なし表示）chompの機能は、対象の文字列の末尾から改行コードを削除した新しい文字列の生成

  # open → CSV書き込み
  CSV.open("#{file_name}.csv", "a") do |csv|
    csv.puts ["#{memo}"]
  end

else
  puts "申し訳ないが、それは無効な入力だ。1か2の値を入力してな〜" # 1と2以外が押された時の処理
end